package ch11;

public class quiz {
    /*
1. 예외에 대한 설명 중 틀린 것은 무엇입니까?
➊ 예외는 사용자의 잘못된 조작, 개발자의 잘못된 코딩으로 인한 프로그램 오류를 말한다.
➋ RuntimeException의 하위 예외는 컴파일러가 예외 처리 코드를 체크하지 않는다.
➌ 예외는 try-catch 블록을 사용해서 처리된다.
➍ 자바 표준 예외만 프로그램에서 처리할 수 있다.
답: ➍
풀이: 자바에서는 표준 예외를 제외한 표준 라이브러리에는 존재하지 않기 때문에 직접 예외
클래스를 정의해서 사용하는 사용자 정의 예외가 있다.(사용자 정의 예의를 만들 수 있다.)

2. try-catch-finally 블록에 대한 설명 중 틀린 것은 무엇입니까?
➊ try { } 블록에는 예외가 발생할 수 있는 코드를 작성한다.
➋ catch { } 블록은 try { } 블록에서 발생한 예외를 처리하는 블록이다.
➌ try { } 블록에서 return 문을 사용하면 finally { } 블록은 실행되지 않는다.
➍ catch { } 블록은 예외의 종류별로 여러 개를 작성할 수 있다.
답: ➌
풀이: 예외 발생 여부와 상관없ㅇ이 finally 블록은 항상 실행된다. try 블록과 catch 블록에서 return문(메소드종료)을
사용하더라도 finally 블록은 항상 실행된다.
try[return;} catch(..) finally{}에서 finally는 return문이 try에서 실행되더라도, 항상 실행한다.

3. throws에 대한 설명으로 틀린 것은 무엇입니까?
➊ 생성자나 메소드의 선언 끝 부분에 사용되어 내부에서 발생된 예외를 떠넘긴다.
➋ throws 뒤에는 떠넘겨야 할 예외를 쉼표(,)로 구분해서 기술한다.
➌ 모든 예외를 떠넘기기 위해 간단하게 throws Exception으로 작성할 수 있다.
➍ 새로운 예외를 발생시키기 위해 사용된다.
답: ➍
풀이: 새로운 예외를 발생시키기 위해서는 throws 가 아닌 'throw' 를 사용한다.

4. throw에 대한 설명으로 틀린 것은 무엇입니까?
➊ 예외를 최초로 발생시키는 코드이다.
➋ 예외를 호출한 곳으로 떠넘기기 위해 메소드 선언부에 작성된다.
➌ throw로 발생된 예외는 일반적으로 생성자나 메소드 선언부에 throws로 떠넘겨진다.
➍ throw 키워드 뒤에는 예외 객체 생성 코드가 온다.
답: ➋
풀이: 예외를 호출한 곳으로 떠남기기 위해 메소드 선언부에 작성하는 것은 throws이다.
throws: 예외 떠넘기기
throw: 예외 발생시키기

     */
}
